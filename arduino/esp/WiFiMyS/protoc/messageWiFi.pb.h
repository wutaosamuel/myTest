// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoc/messageWiFi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protoc_2fmessageWiFi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protoc_2fmessageWiFi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protoc_2fmessageWiFi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protoc_2fmessageWiFi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protoc_2fmessageWiFi_2eproto;
namespace messageWiFi {
class check_List;
class check_ListDefaultTypeInternal;
extern check_ListDefaultTypeInternal _check_List_default_instance_;
class send_data;
class send_dataDefaultTypeInternal;
extern send_dataDefaultTypeInternal _send_data_default_instance_;
class server_respond;
class server_respondDefaultTypeInternal;
extern server_respondDefaultTypeInternal _server_respond_default_instance_;
}  // namespace messageWiFi
PROTOBUF_NAMESPACE_OPEN
template<> ::messageWiFi::check_List* Arena::CreateMaybeMessage<::messageWiFi::check_List>(Arena*);
template<> ::messageWiFi::send_data* Arena::CreateMaybeMessage<::messageWiFi::send_data>(Arena*);
template<> ::messageWiFi::server_respond* Arena::CreateMaybeMessage<::messageWiFi::server_respond>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messageWiFi {

// ===================================================================

class check_List :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageWiFi.check_List) */ {
 public:
  check_List();
  virtual ~check_List();

  check_List(const check_List& from);
  check_List(check_List&& from) noexcept
    : check_List() {
    *this = ::std::move(from);
  }

  inline check_List& operator=(const check_List& from) {
    CopyFrom(from);
    return *this;
  }
  inline check_List& operator=(check_List&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const check_List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const check_List* internal_default_instance() {
    return reinterpret_cast<const check_List*>(
               &_check_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(check_List& a, check_List& b) {
    a.Swap(&b);
  }
  inline void Swap(check_List* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline check_List* New() const final {
    return CreateMaybeMessage<check_List>(nullptr);
  }

  check_List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<check_List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const check_List& from);
  void MergeFrom(const check_List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(check_List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageWiFi.check_List";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2fmessageWiFi_2eproto);
    return ::descriptor_table_protoc_2fmessageWiFi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdMacFieldNumber = 2,
    kRequestFieldNumber = 1,
  };
  // string device_id_mac = 2;
  void clear_device_id_mac();
  const std::string& device_id_mac() const;
  void set_device_id_mac(const std::string& value);
  void set_device_id_mac(std::string&& value);
  void set_device_id_mac(const char* value);
  void set_device_id_mac(const char* value, size_t size);
  std::string* mutable_device_id_mac();
  std::string* release_device_id_mac();
  void set_allocated_device_id_mac(std::string* device_id_mac);

  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:messageWiFi.check_List)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_mac_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2fmessageWiFi_2eproto;
};
// -------------------------------------------------------------------

class send_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageWiFi.send_data) */ {
 public:
  send_data();
  virtual ~send_data();

  send_data(const send_data& from);
  send_data(send_data&& from) noexcept
    : send_data() {
    *this = ::std::move(from);
  }

  inline send_data& operator=(const send_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_data& operator=(send_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const send_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const send_data* internal_default_instance() {
    return reinterpret_cast<const send_data*>(
               &_send_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(send_data& a, send_data& b) {
    a.Swap(&b);
  }
  inline void Swap(send_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline send_data* New() const final {
    return CreateMaybeMessage<send_data>(nullptr);
  }

  send_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<send_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const send_data& from);
  void MergeFrom(const send_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageWiFi.send_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2fmessageWiFi_2eproto);
    return ::descriptor_table_protoc_2fmessageWiFi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:messageWiFi.send_data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2fmessageWiFi_2eproto;
};
// -------------------------------------------------------------------

class server_respond :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageWiFi.server_respond) */ {
 public:
  server_respond();
  virtual ~server_respond();

  server_respond(const server_respond& from);
  server_respond(server_respond&& from) noexcept
    : server_respond() {
    *this = ::std::move(from);
  }

  inline server_respond& operator=(const server_respond& from) {
    CopyFrom(from);
    return *this;
  }
  inline server_respond& operator=(server_respond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const server_respond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const server_respond* internal_default_instance() {
    return reinterpret_cast<const server_respond*>(
               &_server_respond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(server_respond& a, server_respond& b) {
    a.Swap(&b);
  }
  inline void Swap(server_respond* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline server_respond* New() const final {
    return CreateMaybeMessage<server_respond>(nullptr);
  }

  server_respond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<server_respond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const server_respond& from);
  void MergeFrom(const server_respond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_respond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageWiFi.server_respond";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protoc_2fmessageWiFi_2eproto);
    return ::descriptor_table_protoc_2fmessageWiFi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kRespondFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 respond = 1;
  void clear_respond();
  ::PROTOBUF_NAMESPACE_ID::int32 respond() const;
  void set_respond(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:messageWiFi.server_respond)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 respond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoc_2fmessageWiFi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// check_List

// int32 request = 1;
inline void check_List::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 check_List::request() const {
  // @@protoc_insertion_point(field_get:messageWiFi.check_List.request)
  return request_;
}
inline void check_List::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
  // @@protoc_insertion_point(field_set:messageWiFi.check_List.request)
}

// string device_id_mac = 2;
inline void check_List::clear_device_id_mac() {
  device_id_mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& check_List::device_id_mac() const {
  // @@protoc_insertion_point(field_get:messageWiFi.check_List.device_id_mac)
  return device_id_mac_.GetNoArena();
}
inline void check_List::set_device_id_mac(const std::string& value) {
  
  device_id_mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messageWiFi.check_List.device_id_mac)
}
inline void check_List::set_device_id_mac(std::string&& value) {
  
  device_id_mac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messageWiFi.check_List.device_id_mac)
}
inline void check_List::set_device_id_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messageWiFi.check_List.device_id_mac)
}
inline void check_List::set_device_id_mac(const char* value, size_t size) {
  
  device_id_mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messageWiFi.check_List.device_id_mac)
}
inline std::string* check_List::mutable_device_id_mac() {
  
  // @@protoc_insertion_point(field_mutable:messageWiFi.check_List.device_id_mac)
  return device_id_mac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* check_List::release_device_id_mac() {
  // @@protoc_insertion_point(field_release:messageWiFi.check_List.device_id_mac)
  
  return device_id_mac_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void check_List::set_allocated_device_id_mac(std::string* device_id_mac) {
  if (device_id_mac != nullptr) {
    
  } else {
    
  }
  device_id_mac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id_mac);
  // @@protoc_insertion_point(field_set_allocated:messageWiFi.check_List.device_id_mac)
}

// -------------------------------------------------------------------

// send_data

// int32 request = 1;
inline void send_data::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 send_data::request() const {
  // @@protoc_insertion_point(field_get:messageWiFi.send_data.request)
  return request_;
}
inline void send_data::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
  // @@protoc_insertion_point(field_set:messageWiFi.send_data.request)
}

// int32 value = 2;
inline void send_data::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 send_data::value() const {
  // @@protoc_insertion_point(field_get:messageWiFi.send_data.value)
  return value_;
}
inline void send_data::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:messageWiFi.send_data.value)
}

// -------------------------------------------------------------------

// server_respond

// int32 respond = 1;
inline void server_respond::clear_respond() {
  respond_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_respond::respond() const {
  // @@protoc_insertion_point(field_get:messageWiFi.server_respond.respond)
  return respond_;
}
inline void server_respond::set_respond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  respond_ = value;
  // @@protoc_insertion_point(field_set:messageWiFi.server_respond.respond)
}

// string message = 2;
inline void server_respond::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& server_respond::message() const {
  // @@protoc_insertion_point(field_get:messageWiFi.server_respond.message)
  return message_.GetNoArena();
}
inline void server_respond::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:messageWiFi.server_respond.message)
}
inline void server_respond::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:messageWiFi.server_respond.message)
}
inline void server_respond::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:messageWiFi.server_respond.message)
}
inline void server_respond::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:messageWiFi.server_respond.message)
}
inline std::string* server_respond::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:messageWiFi.server_respond.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* server_respond::release_message() {
  // @@protoc_insertion_point(field_release:messageWiFi.server_respond.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void server_respond::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:messageWiFi.server_respond.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messageWiFi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protoc_2fmessageWiFi_2eproto
